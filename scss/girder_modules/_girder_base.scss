//////////////////////////////
// Base Scss and grid functionality
// Outputs the minimum CSS required to handle units and self-clearing rows

// Set breakpoint map values as globals if respond-to is being used
@if $use-breakpoint == true {
	$breakpoints: add-breakpoint('turn single column', (10em $small-breakpoint, 'no-query' '.no-mq')) !global;
	$breakpoints: add-breakpoint('small to medium', ($small-breakpoint $medium-breakpoint, 'no-query' '.no-mq')) !global;
	$breakpoints: add-breakpoint('medium and up', $medium-breakpoint) !global;
	$breakpoints: add-breakpoint('larger screens', $large-breakpoint) !global;
	$breakpoints: add-breakpoint('extra large screens', $xlarge-breakpoint) !global;
}

// Set up the container alignment and max-width
// This is the only CSS that Girder outputs by default (.row self-clearing stuff)
.container, .#{$row-class} {
	margin: $container-margins;
	max-width: $container-max-width;
}

// A list of unit names and corresponding widths required by Girder
$units:'half' 50%,
				'third' 33.333%,
				'two-thirds' 66.666%,
				'fourth' 25%,
				'three-fourths' 75%,
				'fifth' 20%,
				'two-fifths' 40%,
				'three-fifths' 60%,
				'four-fifths' 80%,
				'sixth' 16.6666%,
				'five-sixths' 83.3333%,
				'golden-small' 38.2716%,
				'golden-large' 61.7283%,
				'whole' 100%;


// Mixin for unit widths (Optimize @if and add func for return values)
@mixin unit($width:whole, $addgutters:true) {

	// Handle the no-gutter case but its not pretty, looking for better options
	@if $addgutters == false {
		.#{$row-class} & {
			padding-left: 0;
			padding-right: 0;
		}
	}

	@if $width == 'half' or $width == 'two-fourths' {
		@extend %half;
	}
	@else if $width == 'third' or $width == 'two-sixths' {
		@extend %third;
	}
	@else if $width == 'two-thirds' or $width == 'four-sixths' {
		@extend %two-thirds;
	}
	@else if $width == 'fourth' {
		@extend %fourth;
	}
	@else if $width == 'three-fourths' {
		@extend %three-fourths;
	}
	@else if $width == 'fifth' {
		@extend %fifth;
	}
	@else if $width == 'two-fifths' {
		@extend %two-fifths;
	}
	@else if $width == 'three-fifths' {
		@extend %three-fifths;
	}
	@else if $width == 'four-fifths' {
		@extend %four-fifths;
	}
	@else if $width == 'sixth' {
		@extend %sixth;
	}
	@else if $width == 'five-sixths' {
		@extend %five-sixths;
	}
	@else if $width == 'golden-small' {
		@extend %golden-small;
	}
	@else if $width == 'golden-large' {
		@extend %golden-large;
	}
	@else if $width == 'whole' {
		@extend %whole;

		@include breakpoint($single-column) {
			padding-right: 0 !important;
		}
	}
	@else {
		@warn '"#{$width}" is not a valid width for the unit mixin (try "half" or "three-fourths" instead). Defaulting to "whole" unit.';
	}
}


%unit {
	float: left;
	padding: $gutters / 2;
	width: 100%;

	// Add a .no-gutters class to a unit to remove gutters (experimental)
	// @if $html-classes == true {
	// 	&.no-gutters,
	// 	.no-gutters > &:first-of-type {
	// 		padding-left: 0;
	// 		padding-right: 0;
	// 	}
	// }
}


%half           { width: 50%;
	@extend %unit; }
%third      { width: 33.3332%;
	@extend %unit; }
%two-thirds     { width: 66.6665%;
	@extend %unit; }
%fourth    { width: 25%;
	@extend %unit; }
%three-fourths { width: 75%;
	@extend %unit; }
%fifth      { width: 20%;
	@extend %unit; }
%two-fifths     { width: 40%;
	@extend %unit; }
%three-fifths   { width: 60%;
	@extend %unit; }
%four-fifths    { width: 80%;
	@extend %unit; }
%sixth      { width: 16.6666%;
	@extend %unit; }
%five-sixths      { width: 83.3333%;
	@extend %unit; }
%golden-small   { width: 38.2716%;
	@extend %unit; }
%golden-large   { width: 61.7283%;
	@extend %unit; }
%whole {
	width: 100%;
	padding: $gutters /2;
}

// Rows can be cleared with this class if needed
.#{$row-class} {

	clear: both;
	display: block;

	// Automagic clearing for rows
	&:after {clear: both;}

	&:before, &:after {
		display: table;
		content: "";
		line-height: 0;
	}

	// Remove nested outer gutters at css level
	.#{$row-class} > :first-of-type {padding-left: 0;}
	.#{$row-class} > :last-child {padding-right: 0;}

	// Option to add outer gutters back in to keep third+ units even
	&.equal-units {
		> :first-of-type {padding-left: $gutters / 2;}
		> :last-child {padding-right: $gutters / 2;}
	}
}

// Girder Responsive unit Mixin uses a cleaner syntax (until maps in Sass 3.3)
// Separate unit mixin for media queries for additional control over gutters
@mixin responsive-unit($size:whole, $gutters:false) {
	@each $unit in $units {
		@if $size == nth($unit, 1) {
			$length: length($unit);
			$size: whole !default;

			@for $i from 2 through $length {
				// If it's the first item, override it
				@if $i == 2 {
					$size: nth($unit, $i);
				}
				// Else, join $size
				@else {
					$size: join($size, nth($unit, $i));
				}
			}
			// Send this to our unit Mixin
			@include girder-unit($size, $gutters);
		}
	}
}

// This separates our unit mixin and css to keep things tidy
@mixin girder-unit ($width, $addgutters) {
	.#{$row-class} & {
		float: left;
		// reverse gutters logic to prevent overriding false
		@if $addgutters == true {
			padding: $gutters / 2;
		}
		// Collect our unit size
		width: $width;
	}
}


// Push units up to four eighths including gutters (experimental)
// Nested rows should contain homogeneous units with em-based gutters
@mixin pushover-units {
	@if not $html-classes {
		$gutterpercent: $gutters * $em-base / 100;
		.push-one,
		.push-two,
		.push-three,
		.push-four {
			position: relative;
		}
		// We'll attempt to align with eights going up to half-page
		.push-one { left: 12.5% + strip-unit($gutterpercent); }
		.push-two { left: 25% + strip-unit($gutterpercent); }
		.push-three { left: 37.5% + strip-unit($gutterpercent); }
		.push-four { left: 50% + strip-unit($gutterpercent); }
	}
}

@if $include-extras == true {
	// Optional: classes to push units (.push-one to .push-four)
	@include pushover-units;
}


// Only include these classes if the option exists
@if $html-classes == true {
	$units: (whole 100%), (half 50%), (third 33.3332%), (two-thirds 66.6665%), (fourth 25%), (three-fourths 75%), (fifth 20%), (two-fifths 40%), (three-fifths 60%), (four-fifths 80%), (sixth 16.6666%), (five-sixths 83.3333%), (golden-small 38.2716%), (golden-large 61.7283%);

	@each $unit in $units {
	  .#{nth($unit, 1)} {
	    width: #{nth($unit, 2)};
	    @extend .unit;
	  }
	}

	.unit {
		float: left;
		padding: $gutters / 2;
		width: 100%;

		&:first-of-type {padding-left: $gutters;}
		&:last-child {padding-right: $gutters;}

		.#{$row-class} &:first-of-type {padding-left: 0;}
		.#{$row-class} &:last-child {padding-right: 0;}
	}

	$gutterpercent: $gutters * $em-base / 100;
	.push-one,
	.push-two,
	.push-three,
	.push-four {
		position: relative;
	}
	// We'll attempt to align with eights going up to half-page
	.push-one { left: 12.5% + strip-unit($gutterpercent); }
	.push-two { left: 25% + strip-unit($gutterpercent); }
	.push-three { left: 37.5% + strip-unit($gutterpercent); }
	.push-four { left: 50% + strip-unit($gutterpercent); }
}
